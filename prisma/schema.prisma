generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole       @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  comments      Comment[]
  commentVotes  CommentVote[]
  notifications Notification[]
  products      Product[]
  sessions      Session[]
  votes         Vote[]
}

model Product {
  id           String    @id @default(cuid())
  title        String
  description  String
  url          String
  image        String?
  userId       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  tagline      String?
  appStoreUrl  String?
  images       String[]
  platforms    String[]
  playStoreUrl String?
  socialLinks  Json?
  video        String?
  comments     Comment[]
  user         User      @relation(fields: [userId], references: [id])
  votes        Vote[]
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
}

model Comment {
  id        String        @id @default(cuid())
  content   String
  parentId  String?
  productId String
  userId    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  parent    Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[]     @relation("CommentReplies")
  product   Product       @relation(fields: [productId], references: [id])
  user      User          @relation(fields: [userId], references: [id])
  votes     CommentVote[]
}

model CommentVote {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, commentId])
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  userId    String
  entityId  String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])
}

enum UserRole {
  USER
  ADMIN
}

enum NotificationType {
  COMMENT
  MENTION
  PRODUCT_APPROVED
  UPVOTE
}
