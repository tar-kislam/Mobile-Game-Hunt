// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App-specific models
enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?   // nullable for OAuth users
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth.js relations
  accounts Account[]
  sessions Session[]

  // App relations
  products      Product[]
  votes         Vote[]
  comments      Comment[]
  commentVotes  CommentVote[]
  notifications Notification[]
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  slug     String    @unique
  products Product[]
}

model Product {
  id          String   @id @default(cuid())
  title       String
  tagline     String?  // Added tagline field for Submit Game feature
  description String   @db.Text
  url         String   // Changed from 'link' to 'url' as requested
  image       String?  // Main image for backward compatibility
  images      String[] // Array of image URLs for carousel
  video       String?  // Optional video URL
  categoryId  String
  userId      String
  appStoreUrl String?  // App Store link
  playStoreUrl String? // Play Store link
  socialLinks Json?    // Social media links (Twitter, etc.)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
  votes    Vote[]
  comments Comment[]
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text // Changed from 'body' to 'content' as requested
  parentId  String?  // for nested comments
  productId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent   Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[]     @relation("CommentReplies")
  product  Product       @relation(fields: [productId], references: [id])
  user     User          @relation(fields: [userId], references: [id])
  votes    CommentVote[]
}

model CommentVote {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  comment Comment @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])
}

enum NotificationType {
  COMMENT
  MENTION
  PRODUCT_APPROVED
  UPVOTE
}

model Notification {
  id       String           @id @default(cuid())
  type     NotificationType
  userId   String
  entityId String // reference to the related entity (comment, product, etc.)
  read     Boolean          @default(false)
  createdAt DateTime        @default(now())

  user User @relation(fields: [userId], references: [id])
}
