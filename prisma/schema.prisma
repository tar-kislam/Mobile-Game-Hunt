generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  password       String?
  emailVerified  DateTime?
  image          String?
  role           UserRole        @default(USER)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[]
  comments       Comment[]
  commentVotes   CommentVote[]
  follows        Follow[]
  metrics        Metric[]
  notifications  Notification[]
  playtestClaims PlaytestClaim[]
  products       Product[]
  sessions       Session[]
  votes          Vote[]
  productMakers  ProductMaker[]
  studios        Studio[]
}

model Product {
  id           String        @id @default(cuid())
  title        String
  description  String
  url          String
  image        String?
  thumbnail    String?
  gallery      Json?
  videoUrl     String?
  gameplayGifUrl String?
  demoUrl      String?
  studioName   String?  // Studio/Publisher name
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  tagline      String?
  appStoreUrl  String?
  images       String[]
  platforms    String[]
  playStoreUrl String?
  socialLinks  Json?
  video        String?
  countries    String[]
  status       ProductStatus @default(DRAFT)
  releaseAt    DateTime?
  launchType   String?       // Soft launch / Global launch
  launchDate   DateTime?      // Launch date
  monetization String?        // Free, Paid, Freemium, Ads supported, Subscription
  engine       String?        // Unity, Unreal, Godot, Custom
  // Community & Extras fields
  pricing      String?        // FREE, PAID, FREEMIUM
  promoOffer   String?        // Promotional offer description
  promoCode    String?        // Promo code
  promoExpiry  DateTime?      // Promo expiry date
  playtestQuota Int?          // Number of playtest keys
  playtestExpiry DateTime?    // Playtest keys expiry date
  sponsorRequest Boolean      @default(false)
  sponsorNote   String?        // Additional notes for sponsor request
  crowdfundingPledge Boolean  @default(false)
  gamificationTags String[]   // Array of gamification tag IDs
  clicks       Int           @default(0)
  follows      Int           @default(0)
  comments     Comment[]
  followUsers  Follow[]
  metrics      Metric[]
  playtests    Playtest[]
  pressKit     PressKit?
  user         User          @relation(fields: [userId], references: [id])
  votes        Vote[]
  tags         ProductTag[]
  categories   ProductCategory[]
  makers       ProductMaker[]

  @@index([createdAt], map: "idx_product_createdAt")
  @@index([status, createdAt], map: "idx_product_status_createdAt")
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
}

model Follow {
  id        String   @id @default(cuid())
  userId    String
  gameId    String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [gameId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, gameId])
}

model Metric {
  id        String   @id @default(cuid())
  gameId    String
  type      String
  referrer  String?
  userId    String?
  userAgent String?
  ipAddress String?
  timestamp DateTime @default(now())
  product   Product  @relation(fields: [gameId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

model Comment {
  id        String        @id @default(cuid())
  content   String
  parentId  String?
  productId String
  userId    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  parent    Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[]     @relation("CommentReplies")
  product   Product       @relation(fields: [productId], references: [id])
  user      User          @relation(fields: [userId], references: [id])
  votes     CommentVote[]
}

model CommentVote {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, commentId])
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  userId    String
  entityId  String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])
}

model PressKit {
  id        String   @id @default(cuid())
  gameId    String   @unique
  headline  String
  about     String
  features  String[]
  media     String[]
  zipUrl    String?  // URL to downloadable zip file
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model Playtest {
  id        String          @id @default(uuid())
  gameId    String
  quota     Int
  expiresAt DateTime?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  product   Product         @relation(fields: [gameId], references: [id], onDelete: Cascade)
  claims    PlaytestClaim[]
}

model PlaytestClaim {
  id         String   @id @default(uuid())
  playtestId String
  userId     String
  claimedAt  DateTime @default(now())
  playtest   Playtest @relation(fields: [playtestId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([playtestId, userId])
}

enum UserRole {
  USER
  ADMIN
}

enum NotificationType {
  COMMENT
  MENTION
  PRODUCT_APPROVED
  UPVOTE
}

enum ProductStatus {
  DRAFT
  PENDING
  PUBLISHED
  REJECTED
  ARCHIVED
}

// New tagging system
model Tag {
  id        String        @id @default(cuid())
  slug      String        @unique
  name      String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  products  ProductTag[]
}

model ProductTag {
  id        String   @id @default(cuid())
  productId String
  tagId     String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([productId, tagId])
  @@index([tagId])
}

// Game categories
model Category {
  id        String            @id @default(cuid())
  name      String            @unique
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  products  ProductCategory[]
}

model ProductCategory {
  id         String   @id @default(cuid())
  productId  String
  categoryId String
  createdAt  DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([productId, categoryId])
  @@index([categoryId])
}

// Makers attached to a product (e.g., Hunter, Maker)
model ProductMaker {
  id        String      @id @default(cuid())
  productId String
  userId    String?
  email     String?     // for invited collaborators
  role      MakerRole   @default(MAKER)
  isCreator Boolean     @default(false)
  createdAt DateTime    @default(now())
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User?       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@index([userId])
}

model Studio {
  id        String   @id @default(cuid())
  name      String   @unique
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([name])
}

enum MakerRole {
  MAKER
  DESIGNER
  DEVELOPER
  PUBLISHER
  HUNTER
}
